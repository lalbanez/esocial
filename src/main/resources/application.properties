spring.main.banner-mode=off

# create and drop tables and sequences, loads import.sql
#spring.jpa.hibernate.ddl-auto=create-drop
#spring.jpa.show-sql=true

# Oracle settings
#spring.datasource.url=jdbc:oracle:thin:@//10.32.36.24:1521/pdbspprvhmg.spprev.gov
spring.datasource.username=VPH4dx7em4wrZy9V3ORBeQ==
spring.datasource.password=fh4iwlmxfB03pzBc62cueg==
spring.datasource.driver-class-oracle.jdbc.driver.OracleDriver
spring.jpa.properties.hibernate.default_schema=ESOCIAL


# HikariCP settings
# spring.datasource.hikari.*
spring.datasource.hikari.connection-timeout=60000
spring.datasource.hikari.maximum-pool-size=5

# logging
#logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n
logging.level.org.hibernate.SQL=debug
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.=error



#https://domineospring.wordpress.com/2015/09/23/ficando-ainda-mais-produtivo-com-o-spring-boot/
#spring.devtools.restart.trigger-file=.reloadtrigger


# ==============================================================
# = Keep the connection alive if idle for a long time (needed in production)
# ==============================================================
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ==============================================================
# = Spring Security / Queries for AuthenticationManagerBuilder
# ==============================================================
spring.queries.users-query=select email, password, active from ESOCIAL.TB_ESOCIAL_USER where email=?
spring.queries.roles-query=select u.email, r.role from ESOCIAL.TB_ESOCIAL_USER u inner join ESOCIAL.tb_esocial_user_role ur on (u.user_id = ur.user_id) inner join ESOCIAL.TB_ESOCIAL_ROLE  r on (ur.role_id = r.role_id) where u.email=?
# ==============================================================
# = Show or not log for each sql query
# ==============================================================
spring.jpa.show-sql = true
